
provide:
   lang-defaults

lang-defaults = {
   en = {
      backtickQuotes = true
      angleQuotes = false
      quotes = false
      singleQuotes = true
      enDash = true
      emDash = true
      ellipsis = true
      asterism = false
      spacePunctuation = false
      oe = false
   }
   fr = {
      backtickQuotes = true
      angleQuotes = true
      quotes = false
      singleQuotes = true
      enDash = true
      emDash = true
      ellipsis = true
      asterism = false
      spacePunctuation = true
      oe = true
   }
}

install(@, options) =
   feat = lang-defaults[options.locale or .en] & [options.features or {=}]

   rp{x, y} = @register-postprocessor{x, y}

   if feat.single-quotes:
      rp{"(^|[ \"])'", "$1‘"}
      rp{"'([ \".,!?]|$)", "’$1"}
   if feat.em-dash:
      rp{"---", "—"}
   if feat.en-dash:
      rp{"--", "–"}
   if feat.ellipsis:
      rp{"\\.\\.\\.", "…"}
   if feat.asterism:
      rp{R.g"\*\*\*", .asterism % "⁂"}

   match options.locale or .en:
      .en or .english ->
         if feat.backtick-quotes:
            rp{"``", "“"}
            rp{"''(?=[^'])", "”"}
         if feat.quotes:
            rp{'(^| )"', "$1“"}
            rp{'"([ .,!?]|$)', "”$1"}
         if feat.angle-quotes:
            rp{"<<", "“"}
            rp{">>", "”"}
      .fr or .french ->
         if feat.space-punctuation:
            rp{R.g"([a-zA-ZéÉèÈàÀùÙ]) *([!?:])", "$1\u00A0$2"}
         if feat.angle-quotes:
            rp{"<<", "«\u00A0"}
            rp{">>", "\u00A0»"}
         if feat.backtick-quotes:
            rp{"``", "«\u00A0"}
            rp{"''(?=[^'])", "\u00A0»"}
         if feat.quotes:
            rp{'(^| )"', "$1«\u00A0"}
            rp{'"([ .,!?]|$)', "\u00A0»$1"}
         if feat.oe:
            rp{"oe", "œ"}
            rp{"Oe", "Œ"}
      loc ->
         throw E.quaint-smartypants.unsupported-locale with
            'No support for locale "{loc}" in quaint-smartypants'

main(*match) =
   {@, options = {=}} when @is-quaint-engine ->
      install(@, options)
   {options = {=}} ->
      {@} -> main(@, options)

provide = main
